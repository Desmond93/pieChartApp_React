{"version":3,"sources":["Components/PageForm/PageForm.module.css","Components/PageDiagram/PageDiagramSector/PageDigramSector.module.css","Components/Header/Header.jsx","appReducer.js","Components/PageForm/FormComponent/FormComponent.jsx","Components/PageForm/PageForm.jsx","Components/PageDiagram/PageDiagramSector/PageDiagramSector.jsx","Components/PageDiagram/PageDigram.jsx","App.js","serviceWorker.js","store.js","index.js","Components/Header/Header.module.css","Components/PageDiagram/PageDigram.module.css","Components/PageForm/FormComponent/FormComponent.module.css"],"names":["module","exports","Header","className","styles","header","linkToPages","activeClassName","activeLink","to","setSectorNameAC","sectorName","type","appReducer","state","action","positions","map","p","id","positionId","positionName","positionNameText","positionQuantity","positionQuantityValue","totalQuantity","newState","positionColor","Math","random","toString","substring","toUpperCase","forEach","FormComponent","props","formComponent","formComponentItem","value","onChange","e","dispatch","target","onBlur","PageForm","formComponentElements","f","key","pageForm","buttonAddNewPosition","onClick","PageDiagramSector","unit","r","cx","cy","stroke","sectorColor","strokeDasharray","sectorPercents","strokeDashoffset","sectorShift","onMouseEnter","onMouseOut","PageDiagram","PageDiagramSectorElements","sector","pageDiagram","canvas","chart","viewBox","warningAboutEmptyPositions","App","path","render","Boolean","window","location","hostname","match","store","_state","getState","this","rerenderApp","subscribe","observer","ReactDOM","StrictMode","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.603fe4df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageForm\":\"PageForm_pageForm__Idg4p\",\"buttonAddNewPosition\":\"PageForm_buttonAddNewPosition__3zW7T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"unit\":\"PageDigramSector_unit__21Set\",\"render\":\"PageDigramSector_render__8dff_\"};","import React from \"react\";\r\nimport styles from \"./Header.module.css\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return <div className={styles.header}>\r\n        <NavLink className={styles.linkToPages} \r\n            activeClassName={styles.activeLink} \r\n            to=\"/form\">Form</NavLink>\r\n        <NavLink className={styles.linkToPages} \r\n            activeClassName={styles.activeLink} \r\n            to=\"diagram\">Diagram</NavLink>\r\n    </div>\r\n} \r\n\r\nexport default Header;","const POSITION_NAME_CHANGE = \"POSITION-NAME-CHANGE\";\r\nconst POSITION_QUANTITY_CHANGE = \"POSITION-QUANTITY-CHANGE\";\r\nconst ADD_NEW_POSITION = \"ADD-NEW-POSITION\";\r\nconst SET_TOTAL_QUANTITY = \"SET-TOTAL-QUANTITY\";\r\nconst SET_SECTOR_NAME = \"SET-SECTOR-NAME\";\r\n\r\nconst appReducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case POSITION_NAME_CHANGE:\r\n            return {\r\n                ...state,\r\n                positions: state.positions.map(p => {\r\n                    if (p.id === action.positionId) {\r\n                        p.positionName = action.positionNameText;\r\n                    }\r\n                    return p;\r\n                }\r\n                )\r\n            };\r\n        case POSITION_QUANTITY_CHANGE:\r\n            return {\r\n                ...state,\r\n                positions: state.positions.map(p => {\r\n                    if (p.id === action.positionId) {\r\n                        p.positionQuantity = action.positionQuantityValue;\r\n                    }\r\n                    return p;\r\n                }),\r\n                totalQuantity: 0\r\n            };\r\n        case ADD_NEW_POSITION:\r\n            {\r\n                let newState = { ...state };\r\n                newState.positions = \r\n                    [...state.positions, { \r\n                        id: newState.positionId++, \r\n                        positionName: '', \r\n                        positionQuantity: '',\r\n                        positionColor: '#' + (Math.random().toString(16) + '000000').substring(2,8).toUpperCase() \r\n                        }\r\n                    ]\r\n                return newState;\r\n            };\r\n        case SET_TOTAL_QUANTITY:\r\n            {\r\n                let newState = { ...state };\r\n                state.positions.forEach(p => {\r\n                    newState.totalQuantity += +p.positionQuantity;\r\n                })\r\n                return newState;\r\n            };\r\n            case SET_SECTOR_NAME:\r\n            return {\r\n                ...state,\r\n                sectorName: action.sectorName\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const positionNameChangeAC = (positionNameText, positionId) => {\r\n    return { type: POSITION_NAME_CHANGE, positionNameText, positionId }\r\n}\r\n\r\nexport const positionQuantityChangeAC = (positionQuantityValue, positionId) => {\r\n    return { type: POSITION_QUANTITY_CHANGE, positionQuantityValue, positionId }\r\n}\r\n\r\nexport const addNewPositionAC = () => {\r\n    return { type: ADD_NEW_POSITION }\r\n}\r\n\r\nexport const setTotalQuantityAC = (totalQuantity) => {\r\n    return { type: SET_TOTAL_QUANTITY, totalQuantity }\r\n}\r\n\r\nexport const setSectorNameAC = (sectorName) => {\r\n    return { type: SET_SECTOR_NAME, sectorName }\r\n}\r\n\r\nexport default appReducer;","import React from \"react\";\r\nimport { positionNameChangeAC, positionQuantityChangeAC, setTotalQuantityAC } from './../../../appReducer';\r\nimport styles from './FormComponent.module.css';\r\n\r\nconst FormComponent = (props) => {\r\n\r\n    const positionNameChangeLocal = (e) => {\r\n        props.dispatch(positionNameChangeAC(e.target.value, props.id));\r\n    }\r\n\r\n    const positionQuantityChangeLocal = (e) => {\r\n        props.dispatch(positionQuantityChangeAC(e.target.value, props.id));\r\n    }\r\n\r\n    const setTotalQuantityLocal = () => {\r\n        props.dispatch(setTotalQuantityAC());\r\n    }\r\n\r\n    return <div className={styles.formComponent}>\r\n        <div className={styles.formComponentItem}>\r\n            {\"Position \" + (props.id + +1) + \" name: \"} \r\n            <input value={props.positionName} onChange={positionNameChangeLocal}></input>\r\n        </div>\r\n        <div className={styles.formComponentItem}>\r\n        {\"Position \" + (props.id + +1) + \" quantity: \"} \r\n            <input type=\"number\" value={props.positionQuantity} \r\n                onChange={positionQuantityChangeLocal} onBlur={setTotalQuantityLocal}></input>\r\n        </div>\r\n    </div>\r\n} \r\n\r\nexport default FormComponent;","import React from 'react';\r\nimport FormComponent from './FormComponent/FormComponent';\r\nimport { addNewPositionAC } from './../../appReducer';\r\nimport styles from './PageForm.module.css';\r\n\r\nconst PageForm = (props) => {\r\n\r\n    let formComponentElements = props.positions.map(f => \r\n        <FormComponent key={f.id} positionName={f.positionName} positionQuantity={f.positionQuantity}\r\n        dispatch={props.dispatch} id={f.id} />\r\n    );\r\n\r\n    const addNewPositionLocal = () => {\r\n        props.dispatch(addNewPositionAC());\r\n    }\r\n\r\n    return <div className={styles.pageForm}>\r\n        <button className={styles.buttonAddNewPosition} onClick={addNewPositionLocal}>Add position</button>\r\n        {formComponentElements}\r\n    </div>\r\n} \r\n\r\nexport default PageForm;","import React from \"react\";\r\nimport styles from './PageDigramSector.module.css';\r\nimport { setSectorNameAC } from './../../../appReducer';\r\n\r\nconst PageDiagramSector = (props) => {\r\n\r\n    const setSectorNameLocal = () => {\r\n        props.dispatch(setSectorNameAC(props.sectorName ? props.sectorName : 'Unnamed position'));\r\n    }\r\n\r\n    const deleteSectorNameLocal = () => {\r\n        props.dispatch(setSectorNameAC(''));\r\n    }\r\n\r\n    return <circle className={styles.unit} r=\"15.9\" cx=\"50%\" cy=\"50%\" \r\n        stroke={props.sectorColor}\r\n        strokeDasharray={props.sectorPercents+\" 100\"} strokeDashoffset={props.sectorShift*(-1)}\r\n        onMouseEnter = {setSectorNameLocal} onMouseOut={deleteSectorNameLocal}>\r\n        </circle>\r\n} \r\n\r\nexport default PageDiagramSector;","import React from \"react\";\r\nimport PageDiagramSector from './PageDiagramSector/PageDiagramSector';\r\nimport styles from './PageDigram.module.css';\r\n\r\nconst PageDiagram = (props) => {\r\n\r\n    let sectorShift = 0;\r\n\r\n    let PageDiagramSectorElements = props.state.positions.map(p => {\r\n        let sectorPercents = p.positionQuantity / props.state.totalQuantity * 100;\r\n        let sector = <PageDiagramSector sectorPercents={sectorPercents} sectorShift={sectorShift}\r\n        sectorName={p.positionName} sectorColor={p.positionColor} dispatch={props.dispatch} key={p.id} />;\r\n        sectorShift += sectorPercents;\r\n        return sector;\r\n    })\r\n\r\n    return (props.state.totalQuantity ? <div className={styles.pageDiagram}>\r\n        Total quantity: {props.state.totalQuantity}\r\n        <div className={styles.sectorName}>\r\n            {props.state.sectorName ? \"Sector name: \" + props.state.sectorName : ''}\r\n        </div>\r\n        <div className={styles.canvas}>\r\n            <svg className={styles.chart} viewBox=\"0 0 50 50\">\r\n                {PageDiagramSectorElements}\r\n            </svg>\r\n        </div>\r\n    </div> : <h1 className={styles.warningAboutEmptyPositions}>Enter the quantity of at least one item</h1>)\r\n}\r\n\r\nexport default PageDiagram;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport PageForm from './Components/PageForm/PageForm';\nimport { Route } from 'react-router-dom';\nimport PageDiagram from './Components/PageDiagram/PageDigram';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Route path=\"/form\" render={() => \n        <PageForm positions={props.state.positions} dispatch={props.dispatch} />\n      }/>\n      <Route path=\"/diagram\" render={() =>\n        <PageDiagram state={props.state} dispatch={props.dispatch} />\n      }/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import appReducer from './appReducer';\r\n\r\nconst store = {\r\n    _state: {\r\n        positions: [],\r\n        positionId: 0,\r\n        totalQuantity: 0,\r\n        sectorName: ''\r\n    },\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    rerenderApp() {},\r\n    subscribe(observer) {\r\n        this.rerenderApp = observer;\r\n    },\r\n    dispatch(action) {\r\n        this._state = appReducer(this._state, action)\r\n        this.rerenderApp(store);\r\n    }\r\n}\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport store from './store';\n\nconst rerenderApp = (store) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <HashRouter>\n        <App state={store.getState()} dispatch={store.dispatch.bind(store)} />\n      </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nrerenderApp(store);\n\nstore.subscribe(rerenderApp);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__zBt2q\",\"linkToPages\":\"Header_linkToPages__3vPs2\",\"activeLink\":\"Header_activeLink__2S4lW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageDiagram\":\"PageDigram_pageDiagram__7UaV-\",\"warningAboutEmptyPositions\":\"PageDigram_warningAboutEmptyPositions__3WfE3\",\"sectorName\":\"PageDigram_sectorName__3j4i_\",\"canvas\":\"PageDigram_canvas__2xALX\",\"chart\":\"PageDigram_chart__1oe_I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formComponent\":\"FormComponent_formComponent__3vMPC\",\"formComponentItem\":\"FormComponent_formComponentItem__o_pB4\"};"],"sourceRoot":""}